# frozen_string_literal: true

RSpec.describe MetaStruct::Graph::Node do
  before do # populate a rspec-controllable uuid generator to the global state
    ::MetaStruct::Graph::Node::Factory::DIContainer.register(:uuid_generator) do
      uuid_collection = %w[test1 test2 test3].cycle
      -> { uuid_collection.next }
    end
  end

  after do # return the original uuid generator to the global state
    ::MetaStruct::Graph::Node::Factory::DIContainer.register(:uuid_generator) do
      ::MetaStruct::Graph::Node::UUIDGenerator
    end
  end

  describe 'creation failures' do
    specify 'fails on invalid labels' do
      aggregate_failures 'invalid labels' do
        expect do # not an array
          MetaStruct::Graph::Node.create(labels: 'test')
        end.to raise_error(MetaStruct::Graph::InvalidNodeLabelsError)

        expect do # a collection of non-string objects
          MetaStruct::Graph::Node.create(labels: [Object.new])
        end.to raise_error(MetaStruct::Graph::InvalidNodeLabelsError)

        expect do # not an array of strings
          MetaStruct::Graph::Node.create(labels: ['test', 123])
        end.to raise_error(MetaStruct::Graph::InvalidNodeLabelsError)

        expect do # an array of strings - good
          MetaStruct::Graph::Node.create(labels: %w[test no_test])
        end.not_to raise_error

        expect do # an array of strings and symbols - good
          MetaStruct::Graph::Node.create(labels: ['test', :no_test])
        end.not_to raise_error

        expect do # an array of symbols - good
          MetaStruct::Graph::Node.create(labels: %i[test no_test])
        end.not_to raise_error

        expect do # empty array of labels - good
          MetaStruct::Graph::Node.create(labels: [])
        end.not_to raise_error

        expect do # labels are not provided - good
          MetaStruct::Graph::Node.create
        end.not_to raise_error
      end
    end

    specify 'fails on invalid properties' do
      aggregate_failures 'invalid properties' do
        expect do # not a hash
          MetaStruct::Graph::Node.create(properties: 'test')
        end.to raise_error(MetaStruct::Graph::InvalidNodePropertiesError)

        expect do # hash with non-string/non-symbol keys
          MetaStruct::Graph::Node.create(properties: { Object.new => 'test' })
        end.to raise_error(MetaStruct::Graph::InvalidNodePropertiesError)

        expect do # hash with string keys - good
          MetaStruct::Graph::Node.create(properties: { 'a' => 1, 'b' => Object.new })
        end.not_to raise_error

        expect do # hash with symbol kesy - good
          MetaStruct::Graph::Node.create(properties: { a: 1, b: Object.new })
        end.not_to raise_error

        expect do # hash with both string and symbol keys - good
          MetaStruct::Graph::Node.create(properties: { :a => 1, 'b' => Object.new })
        end.not_to raise_error

        expect do # properties are not provided - good
          MetaStruct::Graph::Node.create
        end.not_to raise_error
      end
    end
  end

  describe 'uuid auto/manual population (during creation)' do
    specify 'autogenerated on nil values' do
      aggregate_failures 'different styles of nil uuid population' do
        node = MetaStruct::Graph::Node.create
        expect(node.uuid).not_to eq(nil)

        node = MetaStruct::Graph::Node.create(uuid: nil)
        expect(node.uuid).not_to eq(nil)
      end
    end

    specify 'generates uuid if uuid is not provided' do
      aggregate_failures 'different uuids (manual and automatic)' do
        node = MetaStruct::Graph::Node.create
        expect(node.uuid).to eq('test1')

        node = MetaStruct::Graph::Node.create(uuid: 'my_uuid')
        expect(node.uuid).to eq('my_uuid')

        node = MetaStruct::Graph::Node.create
        expect(node.uuid).to eq('test2')
      end
    end
  end

  describe 'common instance creation and state access' do
    specify 'commonly created node (creation without attribute substitution)' do
      node = MetaStruct::Graph::Node.create

      aggregate_failures 'default state' do
        expect(node.uuid).to eq('test1')
        expect(node.labels).to eq([])
        expect(node.properties).to eq({})

        expect(node.labels.frozen?).to eq(true)
        expect(node.properties.frozen?).to eq(true)
      end
    end

    specify 'commonly created node (with attribute population)' do
      aggregate_failures 'manually populated state' do
        node = MetaStruct::Graph::Node.create(
          uuid: 'my_own_uuid',
          labels: %w[reaction translation],
          properties: { activity: :send_message, text: 'test_text' }
        )

        expect(node.uuid).to eq('my_own_uuid')
        expect(node.labels).to contain_exactly('reaction', 'translation')
        expect(node.properties).to match('activity' => :send_message, 'text' => 'test_text')

        expect(node.labels.frozen?).to eq(true)
        expect(node.properties.frozen?).to eq(true)
      end
    end

    specify 'labels automatically transforms to strings' do
      node = MetaStruct::Graph::Node.create(labels: ['a', :b, 'c', :d])
      expect(node.labels).to contain_exactly('a', 'b', 'c', 'd')
    end

    specify 'property keys automatically transforms to strings' do
      node = MetaStruct::Graph::Node.create(properties: { a: 1, 'b' => 2, c: 3, 'd' => 4 })
      expect(node.properties).to match('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4)
    end
  end
end
